// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift

import Foundation
import Rswift
import UIKit

/// This `R` struct is code generated, and contains references to static resources.
struct R: Rswift.Validatable {
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    private init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    private init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    private init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 33 images.
  struct image {
    /// Image `accountButton`.
    static let accountButton = ImageResource(bundle: _R.hostingBundle, name: "accountButton")
    /// Image `activityAndHistory`.
    static let activityAndHistory = ImageResource(bundle: _R.hostingBundle, name: "activityAndHistory")
    /// Image `activityAndHistorySelected`.
    static let activityAndHistorySelected = ImageResource(bundle: _R.hostingBundle, name: "activityAndHistorySelected")
    /// Image `addFile`.
    static let addFile = ImageResource(bundle: _R.hostingBundle, name: "addFile")
    /// Image `addToNetwork`.
    static let addToNetwork = ImageResource(bundle: _R.hostingBundle, name: "addToNetwork")
    /// Image `authBackground`.
    static let authBackground = ImageResource(bundle: _R.hostingBundle, name: "authBackground")
    /// Image `backButton`.
    static let backButton = ImageResource(bundle: _R.hostingBundle, name: "backButton")
    /// Image `back-icon`.
    static let backIcon = ImageResource(bundle: _R.hostingBundle, name: "back-icon")
    /// Image `bioIcon`.
    static let bioIcon = ImageResource(bundle: _R.hostingBundle, name: "bioIcon")
    /// Image `chat`.
    static let chat = ImageResource(bundle: _R.hostingBundle, name: "chat")
    /// Image `chatButton`.
    static let chatButton = ImageResource(bundle: _R.hostingBundle, name: "chatButton")
    /// Image `chatButtonShade`.
    static let chatButtonShade = ImageResource(bundle: _R.hostingBundle, name: "chatButtonShade")
    /// Image `dateIcon`.
    static let dateIcon = ImageResource(bundle: _R.hostingBundle, name: "dateIcon")
    /// Image `dateProposal`.
    static let dateProposal = ImageResource(bundle: _R.hostingBundle, name: "dateProposal")
    /// Image `dateProposalSelected`.
    static let dateProposalSelected = ImageResource(bundle: _R.hostingBundle, name: "dateProposalSelected")
    /// Image `defaultAvatarImage`.
    static let defaultAvatarImage = ImageResource(bundle: _R.hostingBundle, name: "defaultAvatarImage")
    /// Image `editAvatarButton`.
    static let editAvatarButton = ImageResource(bundle: _R.hostingBundle, name: "editAvatarButton")
    /// Image `educationIcon`.
    static let educationIcon = ImageResource(bundle: _R.hostingBundle, name: "educationIcon")
    /// Image `fbIcon`.
    static let fbIcon = ImageResource(bundle: _R.hostingBundle, name: "fbIcon")
    /// Image `filterPage`.
    static let filterPage = ImageResource(bundle: _R.hostingBundle, name: "filterPage")
    /// Image `forward-icon`.
    static let forwardIcon = ImageResource(bundle: _R.hostingBundle, name: "forward-icon")
    /// Image `importAvatarFromFb`.
    static let importAvatarFromFb = ImageResource(bundle: _R.hostingBundle, name: "importAvatarFromFb")
    /// Image `mathProfileButton`.
    static let mathProfileButton = ImageResource(bundle: _R.hostingBundle, name: "mathProfileButton")
    /// Image `modeScreenBackground`.
    static let modeScreenBackground = ImageResource(bundle: _R.hostingBundle, name: "modeScreenBackground")
    /// Image `myNetwork`.
    static let myNetwork = ImageResource(bundle: _R.hostingBundle, name: "myNetwork")
    /// Image `myNetworkSelected`.
    static let myNetworkSelected = ImageResource(bundle: _R.hostingBundle, name: "myNetworkSelected")
    /// Image `occupationIcon`.
    static let occupationIcon = ImageResource(bundle: _R.hostingBundle, name: "occupationIcon")
    /// Image `pairUpButtonBack`.
    static let pairUpButtonBack = ImageResource(bundle: _R.hostingBundle, name: "pairUpButtonBack")
    /// Image `profileEditButton`.
    static let profileEditButton = ImageResource(bundle: _R.hostingBundle, name: "profileEditButton")
    /// Image `removeFromNetwork`.
    static let removeFromNetwork = ImageResource(bundle: _R.hostingBundle, name: "removeFromNetwork")
    /// Image `returnButton`.
    static let returnButton = ImageResource(bundle: _R.hostingBundle, name: "returnButton")
    /// Image `tabBarBack`.
    static let tabBarBack = ImageResource(bundle: _R.hostingBundle, name: "tabBarBack")
    /// Image `timeIcon`.
    static let timeIcon = ImageResource(bundle: _R.hostingBundle, name: "timeIcon")
    
    /// `UIImage(named: "accountButton", bundle: ..., traitCollection: ...)`
    static func accountButton(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.accountButton, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "activityAndHistory", bundle: ..., traitCollection: ...)`
    static func activityAndHistory(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.activityAndHistory, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "activityAndHistorySelected", bundle: ..., traitCollection: ...)`
    static func activityAndHistorySelected(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.activityAndHistorySelected, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "addFile", bundle: ..., traitCollection: ...)`
    static func addFile(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.addFile, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "addToNetwork", bundle: ..., traitCollection: ...)`
    static func addToNetwork(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.addToNetwork, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "authBackground", bundle: ..., traitCollection: ...)`
    static func authBackground(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.authBackground, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "backButton", bundle: ..., traitCollection: ...)`
    static func backButton(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.backButton, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "back-icon", bundle: ..., traitCollection: ...)`
    static func backIcon(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.backIcon, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "bioIcon", bundle: ..., traitCollection: ...)`
    static func bioIcon(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.bioIcon, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "chat", bundle: ..., traitCollection: ...)`
    static func chat(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.chat, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "chatButton", bundle: ..., traitCollection: ...)`
    static func chatButton(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.chatButton, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "chatButtonShade", bundle: ..., traitCollection: ...)`
    static func chatButtonShade(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.chatButtonShade, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "dateIcon", bundle: ..., traitCollection: ...)`
    static func dateIcon(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.dateIcon, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "dateProposal", bundle: ..., traitCollection: ...)`
    static func dateProposal(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.dateProposal, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "dateProposalSelected", bundle: ..., traitCollection: ...)`
    static func dateProposalSelected(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.dateProposalSelected, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "defaultAvatarImage", bundle: ..., traitCollection: ...)`
    static func defaultAvatarImage(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.defaultAvatarImage, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "editAvatarButton", bundle: ..., traitCollection: ...)`
    static func editAvatarButton(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.editAvatarButton, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "educationIcon", bundle: ..., traitCollection: ...)`
    static func educationIcon(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.educationIcon, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "fbIcon", bundle: ..., traitCollection: ...)`
    static func fbIcon(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.fbIcon, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "filterPage", bundle: ..., traitCollection: ...)`
    static func filterPage(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.filterPage, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "forward-icon", bundle: ..., traitCollection: ...)`
    static func forwardIcon(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.forwardIcon, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "importAvatarFromFb", bundle: ..., traitCollection: ...)`
    static func importAvatarFromFb(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.importAvatarFromFb, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "mathProfileButton", bundle: ..., traitCollection: ...)`
    static func mathProfileButton(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.mathProfileButton, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "modeScreenBackground", bundle: ..., traitCollection: ...)`
    static func modeScreenBackground(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.modeScreenBackground, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "myNetwork", bundle: ..., traitCollection: ...)`
    static func myNetwork(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.myNetwork, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "myNetworkSelected", bundle: ..., traitCollection: ...)`
    static func myNetworkSelected(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.myNetworkSelected, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "occupationIcon", bundle: ..., traitCollection: ...)`
    static func occupationIcon(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.occupationIcon, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "pairUpButtonBack", bundle: ..., traitCollection: ...)`
    static func pairUpButtonBack(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.pairUpButtonBack, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "profileEditButton", bundle: ..., traitCollection: ...)`
    static func profileEditButton(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.profileEditButton, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "removeFromNetwork", bundle: ..., traitCollection: ...)`
    static func removeFromNetwork(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.removeFromNetwork, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "returnButton", bundle: ..., traitCollection: ...)`
    static func returnButton(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.returnButton, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "tabBarBack", bundle: ..., traitCollection: ...)`
    static func tabBarBack(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.tabBarBack, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "timeIcon", bundle: ..., traitCollection: ...)`
    static func timeIcon(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.timeIcon, compatibleWithTraitCollection: traitCollection)
    }
    
    private init() {}
  }
  
  private struct intern: Rswift.Validatable {
    static func validate() throws {
      try _R.validate()
    }
    
    private init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `DayView`.
    static let dayView = _R.nib._DayView()
    
    /// `UINib(name: "DayView", bundle: ...)`
    static func dayView(_: Void) -> UINib {
      return UINib(resource: R.nib.dayView)
    }
    
    private init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 28 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AcceptSelectedDateCell`.
    static let acceptSelectedDateCell: ReuseIdentifier<SelectedDateTimeTableViewCell> = ReuseIdentifier(identifier: "AcceptSelectedDateCell")
    /// Reuse identifier `ActionTableViewCell`.
    static let actionTableViewCell: ReuseIdentifier<ActionTableViewCell> = ReuseIdentifier(identifier: "ActionTableViewCell")
    /// Reuse identifier `ActivityItemTableViewCell`.
    static let activityItemTableViewCell: ReuseIdentifier<ActivityItemTableViewCell> = ReuseIdentifier(identifier: "ActivityItemTableViewCell")
    /// Reuse identifier `AddToMyNetworkCell`.
    static let addToMyNetworkCell: ReuseIdentifier<AddToNetworkTableViewCell> = ReuseIdentifier(identifier: "AddToMyNetworkCell")
    /// Reuse identifier `Avatar`.
    static let avatar: ReuseIdentifier<UITableViewCell> = ReuseIdentifier(identifier: "Avatar")
    /// Reuse identifier `Bio`.
    static let bio: ReuseIdentifier<UITableViewCell> = ReuseIdentifier(identifier: "Bio")
    /// Reuse identifier `Birthday`.
    static let birthday: ReuseIdentifier<UITableViewCell> = ReuseIdentifier(identifier: "Birthday")
    /// Reuse identifier `ContactSearchTableViewCell`.
    static let contactSearchTableViewCell: ReuseIdentifier<ContactSearchTableViewCell> = ReuseIdentifier(identifier: "ContactSearchTableViewCell")
    /// Reuse identifier `ContactTableViewCell`.
    static let contactTableViewCell: ReuseIdentifier<ContactTableViewCell> = ReuseIdentifier(identifier: "ContactTableViewCell")
    /// Reuse identifier `DateProposalCell`.
    static let dateProposalCell: ReuseIdentifier<DateProposalCollectionViewCell> = ReuseIdentifier(identifier: "DateProposalCell")
    /// Reuse identifier `DescriptionCell`.
    static let descriptionCell: ReuseIdentifier<ProposedDatesDescriptionTableViewCell> = ReuseIdentifier(identifier: "DescriptionCell")
    /// Reuse identifier `Education`.
    static let education: ReuseIdentifier<UITableViewCell> = ReuseIdentifier(identifier: "Education")
    /// Reuse identifier `Gender`.
    static let gender: ReuseIdentifier<UITableViewCell> = ReuseIdentifier(identifier: "Gender")
    /// Reuse identifier `HeaderCell`.
    static let headerCell: ReuseIdentifier<HeaderTableViewCell> = ReuseIdentifier(identifier: "HeaderCell")
    /// Reuse identifier `Location`.
    static let location: ReuseIdentifier<UITableViewCell> = ReuseIdentifier(identifier: "Location")
    /// Reuse identifier `MatchCell`.
    static let matchCell: ReuseIdentifier<UITableViewCell> = ReuseIdentifier(identifier: "MatchCell")
    /// Reuse identifier `MatchmakerCollectionViewCell`.
    static let matchmakerCollectionViewCell: ReuseIdentifier<MatchmakerCollectionViewCell> = ReuseIdentifier(identifier: "MatchmakerCollectionViewCell")
    /// Reuse identifier `matchmaker info`.
    static let matchmakerInfo: ReuseIdentifier<UITableViewCell> = ReuseIdentifier(identifier: "matchmaker info")
    /// Reuse identifier `MatchmakerTableViewCell`.
    static let matchmakerTableViewCell: ReuseIdentifier<MatchmakerTableViewCell> = ReuseIdentifier(identifier: "MatchmakerTableViewCell")
    /// Reuse identifier `Occupation`.
    static let occupation: ReuseIdentifier<UITableViewCell> = ReuseIdentifier(identifier: "Occupation")
    /// Reuse identifier `OneFieldCell`.
    static let oneFieldCell: ReuseIdentifier<OneFieldTableViewCell> = ReuseIdentifier(identifier: "OneFieldCell")
    /// Reuse identifier `ProposedPersonCollectionCell`.
    static let proposedPersonCollectionCell: ReuseIdentifier<ProposedPersonCollectionCell> = ReuseIdentifier(identifier: "ProposedPersonCollectionCell")
    /// Reuse identifier `SelectActionTableViewCell`.
    static let selectActionTableViewCell: ReuseIdentifier<SelectActionTableViewCell> = ReuseIdentifier(identifier: "SelectActionTableViewCell")
    /// Reuse identifier `SelectValueTableViewCell`.
    static let selectValueTableViewCell: ReuseIdentifier<SelectValueTableViewCell> = ReuseIdentifier(identifier: "SelectValueTableViewCell")
    /// Reuse identifier `SelectedDateCell`.
    static let selectedDateCell: ReuseIdentifier<SelectedDateTimeTableViewCell> = ReuseIdentifier(identifier: "SelectedDateCell")
    /// Reuse identifier `SwitchActionTableViewCell`.
    static let switchActionTableViewCell: ReuseIdentifier<SwitchActionTableViewCell> = ReuseIdentifier(identifier: "SwitchActionTableViewCell")
    /// Reuse identifier `TimeCell`.
    static let timeCell: ReuseIdentifier<ProposedTimeCollectionViewCell> = ReuseIdentifier(identifier: "TimeCell")
    /// Reuse identifier `TwoFieldsCell`.
    static let twoFieldsCell: ReuseIdentifier<TwoFieldsTableViewCell> = ReuseIdentifier(identifier: "TwoFieldsCell")
    
    private init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 12 view controllers.
  struct segue {
    /// This struct is generated for `AccountViewController`, and contains static references to 4 segues.
    struct accountViewController {
      /// Segue identifier `ToEdit`.
      static let toEdit: StoryboardSegueIdentifier<UIStoryboardSegue, AccountViewController, ProfileViewController> = StoryboardSegueIdentifier(identifier: "ToEdit")
      /// Segue identifier `ToSelectPreferene`.
      static let toSelectPreferene: StoryboardSegueIdentifier<UIStoryboardSegue, AccountViewController, SelectValueTableViewController> = StoryboardSegueIdentifier(identifier: "ToSelectPreferene")
      /// Segue identifier `ToStaticContent`.
      static let toStaticContent: StoryboardSegueIdentifier<UIStoryboardSegue, AccountViewController, StaticContentViewController> = StoryboardSegueIdentifier(identifier: "ToStaticContent")
      /// Segue identifier `ToSwitchMode`.
      static let toSwitchMode: StoryboardSegueIdentifier<UIStoryboardSegue, AccountViewController, ModeViewController> = StoryboardSegueIdentifier(identifier: "ToSwitchMode")
      
      /// Optionally returns a typed version of segue `ToEdit`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toEdit(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, AccountViewController, ProfileViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.accountViewController.toEdit, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ToSelectPreferene`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toSelectPreferene(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, AccountViewController, SelectValueTableViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.accountViewController.toSelectPreferene, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ToStaticContent`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toStaticContent(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, AccountViewController, StaticContentViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.accountViewController.toStaticContent, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ToSwitchMode`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toSwitchMode(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, AccountViewController, ModeViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.accountViewController.toSwitchMode, segue: segue)
      }
      
      private init() {}
    }
    
    /// This struct is generated for `ActivityTableViewController`, and contains static references to 2 segues.
    struct activityTableViewController {
      /// Segue identifier `ShowSuggestedTimes`.
      static let showSuggestedTimes: StoryboardSegueIdentifier<UIStoryboardSegue, ActivityTableViewController, UINavigationController> = StoryboardSegueIdentifier(identifier: "ShowSuggestedTimes")
      /// Segue identifier `SuggestTimesForDate`.
      static let suggestTimesForDate: StoryboardSegueIdentifier<UIStoryboardSegue, ActivityTableViewController, ScheduleResultsViewController> = StoryboardSegueIdentifier(identifier: "SuggestTimesForDate")
      
      /// Optionally returns a typed version of segue `ShowSuggestedTimes`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showSuggestedTimes(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, ActivityTableViewController, UINavigationController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.activityTableViewController.showSuggestedTimes, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `SuggestTimesForDate`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func suggestTimesForDate(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, ActivityTableViewController, ScheduleResultsViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.activityTableViewController.suggestTimesForDate, segue: segue)
      }
      
      private init() {}
    }
    
    /// This struct is generated for `DateProfileViewController`, and contains static references to 2 segues.
    struct dateProfileViewController {
      /// Segue identifier `ToChat`.
      static let toChat: StoryboardSegueIdentifier<UIStoryboardSegue, DateProfileViewController, ChatViewController> = StoryboardSegueIdentifier(identifier: "ToChat")
      /// Segue identifier `ToChatWithMatchmaker`.
      static let toChatWithMatchmaker: StoryboardSegueIdentifier<UIStoryboardSegue, DateProfileViewController, ChatViewController> = StoryboardSegueIdentifier(identifier: "ToChatWithMatchmaker")
      
      /// Optionally returns a typed version of segue `ToChat`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toChat(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, DateProfileViewController, ChatViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.dateProfileViewController.toChat, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ToChatWithMatchmaker`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toChatWithMatchmaker(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, DateProfileViewController, ChatViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.dateProfileViewController.toChatWithMatchmaker, segue: segue)
      }
      
      private init() {}
    }
    
    /// This struct is generated for `DateProposalsCollectionViewController`, and contains static references to 1 segues.
    struct dateProposalsCollectionViewController {
      /// Segue identifier `ScheduleTime`.
      static let scheduleTime: StoryboardSegueIdentifier<UIStoryboardSegue, DateProposalsCollectionViewController, ScheduleResultsViewController> = StoryboardSegueIdentifier(identifier: "ScheduleTime")
      
      /// Optionally returns a typed version of segue `ScheduleTime`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func scheduleTime(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, DateProposalsCollectionViewController, ScheduleResultsViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.dateProposalsCollectionViewController.scheduleTime, segue: segue)
      }
      
      private init() {}
    }
    
    /// This struct is generated for `ModeViewController`, and contains static references to 2 segues.
    struct modeViewController {
      /// Segue identifier `ToMainAppContent`.
      static let toMainAppContent: StoryboardSegueIdentifier<UIStoryboardSegue, ModeViewController, TabBarViewController> = StoryboardSegueIdentifier(identifier: "ToMainAppContent")
      /// Segue identifier `ToUserProfile`.
      static let toUserProfile: StoryboardSegueIdentifier<UIStoryboardSegue, ModeViewController, UINavigationController> = StoryboardSegueIdentifier(identifier: "ToUserProfile")
      
      /// Optionally returns a typed version of segue `ToMainAppContent`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toMainAppContent(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, ModeViewController, TabBarViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.modeViewController.toMainAppContent, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ToUserProfile`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toUserProfile(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, ModeViewController, UINavigationController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.modeViewController.toUserProfile, segue: segue)
      }
      
      private init() {}
    }
    
    /// This struct is generated for `MyNetworkViewController`, and contains static references to 2 segues.
    struct myNetworkViewController {
      /// Segue identifier `ToChat`.
      static let toChat: StoryboardSegueIdentifier<UIStoryboardSegue, MyNetworkViewController, ChatViewController> = StoryboardSegueIdentifier(identifier: "ToChat")
      /// Segue identifier `ToProfile`.
      static let toProfile: StoryboardSegueIdentifier<UIStoryboardSegue, MyNetworkViewController, DateProfileViewController> = StoryboardSegueIdentifier(identifier: "ToProfile")
      
      /// Optionally returns a typed version of segue `ToChat`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toChat(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, MyNetworkViewController, ChatViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.myNetworkViewController.toChat, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ToProfile`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toProfile(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, MyNetworkViewController, DateProfileViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.myNetworkViewController.toProfile, segue: segue)
      }
      
      private init() {}
    }
    
    /// This struct is generated for `PairUpViewController`, and contains static references to 1 segues.
    struct pairUpViewController {
      /// Segue identifier `ToFilters`.
      static let toFilters: StoryboardSegueIdentifier<UIStoryboardSegue, PairUpViewController, FilterViewController> = StoryboardSegueIdentifier(identifier: "ToFilters")
      
      /// Optionally returns a typed version of segue `ToFilters`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toFilters(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, PairUpViewController, FilterViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.pairUpViewController.toFilters, segue: segue)
      }
      
      private init() {}
    }
    
    /// This struct is generated for `ScheduleDateTimeViewController`, and contains static references to 1 segues.
    struct scheduleDateTimeViewController {
      /// Segue identifier `DoneSelectingDates`.
      static let doneSelectingDates: StoryboardSegueIdentifier<UIStoryboardSegue, ScheduleDateTimeViewController, UIViewController> = StoryboardSegueIdentifier(identifier: "DoneSelectingDates")
      
      /// Optionally returns a typed version of segue `DoneSelectingDates`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func doneSelectingDates(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, ScheduleDateTimeViewController, UIViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.scheduleDateTimeViewController.doneSelectingDates, segue: segue)
      }
      
      private init() {}
    }
    
    /// This struct is generated for `ScheduleResultsViewController`, and contains static references to 2 segues.
    struct scheduleResultsViewController {
      /// Segue identifier `FromScheduleToChat`.
      static let fromScheduleToChat: StoryboardSegueIdentifier<UIStoryboardSegue, ScheduleResultsViewController, ChatViewController> = StoryboardSegueIdentifier(identifier: "FromScheduleToChat")
      /// Segue identifier `ScheduleDateTime`.
      static let scheduleDateTime: StoryboardSegueIdentifier<UIStoryboardSegue, ScheduleResultsViewController, ScheduleDateTimeViewController> = StoryboardSegueIdentifier(identifier: "ScheduleDateTime")
      
      /// Optionally returns a typed version of segue `FromScheduleToChat`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func fromScheduleToChat(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, ScheduleResultsViewController, ChatViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.scheduleResultsViewController.fromScheduleToChat, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ScheduleDateTime`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func scheduleDateTime(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, ScheduleResultsViewController, ScheduleDateTimeViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.scheduleResultsViewController.scheduleDateTime, segue: segue)
      }
      
      private init() {}
    }
    
    /// This struct is generated for `SignInViewController`, and contains static references to 1 segues.
    struct signInViewController {
      /// Segue identifier `ToModeSelection`.
      static let toModeSelection: StoryboardSegueIdentifier<UIStoryboardSegue, SignInViewController, ModeViewController> = StoryboardSegueIdentifier(identifier: "ToModeSelection")
      
      /// Optionally returns a typed version of segue `ToModeSelection`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toModeSelection(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, SignInViewController, ModeViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.signInViewController.toModeSelection, segue: segue)
      }
      
      private init() {}
    }
    
    /// This struct is generated for `SignUpModeViewController`, and contains static references to 3 segues.
    struct signUpModeViewController {
      /// Segue identifier `ToLogin`.
      static let toLogin: StoryboardSegueIdentifier<UIStoryboardSegue, SignUpModeViewController, SignInViewController> = StoryboardSegueIdentifier(identifier: "ToLogin")
      /// Segue identifier `ToModeSelection`.
      static let toModeSelection: StoryboardSegueIdentifier<UIStoryboardSegue, SignUpModeViewController, ModeViewController> = StoryboardSegueIdentifier(identifier: "ToModeSelection")
      /// Segue identifier `ToSignUpWithEmail`.
      static let toSignUpWithEmail: StoryboardSegueIdentifier<UIStoryboardSegue, SignUpModeViewController, SignUpWithEmailViewController> = StoryboardSegueIdentifier(identifier: "ToSignUpWithEmail")
      
      /// Optionally returns a typed version of segue `ToLogin`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toLogin(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, SignUpModeViewController, SignInViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.signUpModeViewController.toLogin, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ToModeSelection`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toModeSelection(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, SignUpModeViewController, ModeViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.signUpModeViewController.toModeSelection, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ToSignUpWithEmail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toSignUpWithEmail(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, SignUpModeViewController, SignUpWithEmailViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.signUpModeViewController.toSignUpWithEmail, segue: segue)
      }
      
      private init() {}
    }
    
    /// This struct is generated for `SignUpWithEmailViewController`, and contains static references to 1 segues.
    struct signUpWithEmailViewController {
      /// Segue identifier `ToModeSelection`.
      static let toModeSelection: StoryboardSegueIdentifier<UIStoryboardSegue, SignUpWithEmailViewController, ModeViewController> = StoryboardSegueIdentifier(identifier: "ToModeSelection")
      
      /// Optionally returns a typed version of segue `ToModeSelection`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toModeSelection(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, SignUpWithEmailViewController, ModeViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.signUpWithEmailViewController.toModeSelection, segue: segue)
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 8 storyboards.
  struct storyboard {
    /// Storyboard `ActivityAndHistoryScene`.
    static let activityAndHistoryScene = _R.storyboard.activityAndHistoryScene()
    /// Storyboard `AuthenticationScene`.
    static let authenticationScene = _R.storyboard.authenticationScene()
    /// Storyboard `CommonScene`.
    static let commonScene = _R.storyboard.commonScene()
    /// Storyboard `DateProposalScene`.
    static let dateProposalScene = _R.storyboard.dateProposalScene()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `MyNetworkScene`.
    static let myNetworkScene = _R.storyboard.myNetworkScene()
    /// Storyboard `PairUpScene`.
    static let pairUpScene = _R.storyboard.pairUpScene()
    /// Storyboard `UserProfileScene`.
    static let userProfileScene = _R.storyboard.userProfileScene()
    
    /// `UIStoryboard(name: "ActivityAndHistoryScene", bundle: ...)`
    static func activityAndHistoryScene(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.activityAndHistoryScene)
    }
    
    /// `UIStoryboard(name: "AuthenticationScene", bundle: ...)`
    static func authenticationScene(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.authenticationScene)
    }
    
    /// `UIStoryboard(name: "CommonScene", bundle: ...)`
    static func commonScene(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.commonScene)
    }
    
    /// `UIStoryboard(name: "DateProposalScene", bundle: ...)`
    static func dateProposalScene(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.dateProposalScene)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "MyNetworkScene", bundle: ...)`
    static func myNetworkScene(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.myNetworkScene)
    }
    
    /// `UIStoryboard(name: "PairUpScene", bundle: ...)`
    static func pairUpScene(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.pairUpScene)
    }
    
    /// `UIStoryboard(name: "UserProfileScene", bundle: ...)`
    static func userProfileScene(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.userProfileScene)
    }
    
    private init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 75 localization keys.
    struct localizable {
      /// en translation: About
      /// 
      /// Locales: en
      static let aboutButton = StringResource(key: "AboutButton", tableName: "Localizable", locales: ["en"])
      /// en translation: If the proposed times don't work, you can chat with your date immediately below to reschedule! Let's get you on a date!
      /// 
      /// Locales: en
      static let acceptDateTimeDescription = StringResource(key: "AcceptDateTimeDescription", tableName: "Localizable", locales: ["en"])
      /// en translation: Chat
      /// 
      /// Locales: en
      static let acceptDateTimeDoneButton = StringResource(key: "AcceptDateTimeDoneButton", tableName: "Localizable", locales: ["en"])
      /// en translation: Date Proposals
      /// 
      /// Locales: en
      static let acceptDateTimeScreenTitle = StringResource(key: "AcceptDateTimeScreenTitle", tableName: "Localizable", locales: ["en"])
      /// en translation: 
      /// 
      /// Locales: en
      static let acceptDateTimeSubtitle = StringResource(key: "AcceptDateTimeSubtitle", tableName: "Localizable", locales: ["en"])
      /// en translation: Suggested Dates
      /// 
      /// Locales: en
      static let acceptDateTimeTitle = StringResource(key: "AcceptDateTimeTitle", tableName: "Localizable", locales: ["en"])
      /// en translation: You accepted the invitation.
      /// 
      /// Locales: en
      static let acceptedInviteConfirmation = StringResource(key: "AcceptedInviteConfirmation", tableName: "Localizable", locales: ["en"])
      /// en translation: Friends say you are...
      /// 
      /// Locales: en
      static let bioPlaceholder = StringResource(key: "BioPlaceholder", tableName: "Localizable", locales: ["en"])
      /// en translation: Birthday
      /// 
      /// Locales: en
      static let birthdayPlaceholder = StringResource(key: "BirthdayPlaceholder", tableName: "Localizable", locales: ["en"])
      /// en translation: Cancel
      /// 
      /// Locales: en
      static let cancel = StringResource(key: "Cancel", tableName: "Localizable", locales: ["en"])
      /// en translation: Please, make sure all fields in the form are filled and confirm password is equal to password
      /// 
      /// Locales: en
      static let checkInputDataAlertMessage = StringResource(key: "CheckInputDataAlertMessage", tableName: "Localizable", locales: ["en"])
      /// en translation: Please suggest up to 5 availabilities to make sure the upcoming date is going to be convenient for both parties.
      /// 
      /// Locales: en
      static let chooseDateTimeDescription = StringResource(key: "ChooseDateTimeDescription", tableName: "Localizable", locales: ["en"])
      /// en translation: Done
      /// 
      /// Locales: en
      static let chooseDateTimeDoneButton = StringResource(key: "ChooseDateTimeDoneButton", tableName: "Localizable", locales: ["en"])
      /// en translation: Tap on selection to edit
      /// 
      /// Locales: en
      static let chooseDateTimeSubtitle = StringResource(key: "ChooseDateTimeSubtitle", tableName: "Localizable", locales: ["en"])
      /// en translation: Date
      /// 
      /// Locales: en
      static let chooseDateTimeTitle = StringResource(key: "ChooseDateTimeTitle", tableName: "Localizable", locales: ["en"])
      /// en translation: Choose Date
      /// 
      /// Locales: en
      static let chooseDateTimesScreenTitle = StringResource(key: "ChooseDateTimesScreenTitle", tableName: "Localizable", locales: ["en"])
      /// en translation: Confirm Password
      /// 
      /// Locales: en
      static let confirmPassPlaceholder = StringResource(key: "ConfirmPassPlaceholder", tableName: "Localizable", locales: ["en"])
      /// en translation: Date Proposal
      /// 
      /// Locales: en
      static let dateProposalTitle = StringResource(key: "DateProposalTitle", tableName: "Localizable", locales: ["en"])
      /// en translation: Dates
      /// 
      /// Locales: en
      static let datesTabName = StringResource(key: "DatesTabName", tableName: "Localizable", locales: ["en"])
      /// en translation: You declined the invitation.
      /// 
      /// Locales: en
      static let declinedInviteConfimation = StringResource(key: "DeclinedInviteConfimation", tableName: "Localizable", locales: ["en"])
      /// en translation: Degree
      /// 
      /// Locales: en
      static let degreePlaceholder = StringResource(key: "DegreePlaceholder", tableName: "Localizable", locales: ["en"])
      /// en translation: Birthday
      /// 
      /// Locales: en
      static let dobPlaceholder = StringResource(key: "DobPlaceholder", tableName: "Localizable", locales: ["en"])
      /// en translation: Email
      /// 
      /// Locales: en
      static let emailPlaceholder = StringResource(key: "EmailPlaceholder", tableName: "Localizable", locales: ["en"])
      /// en translation: Place of work
      /// 
      /// Locales: en
      static let employerPlaceholder = StringResource(key: "EmployerPlaceholder", tableName: "Localizable", locales: ["en"])
      /// en translation: Want a date? Invite more matchmakers!
      /// 
      /// Locales: en
      static let emptyDateProposalsMessage = StringResource(key: "EmptyDateProposalsMessage", tableName: "Localizable", locales: ["en"])
      /// en translation: Email and password can't be empty.
      /// 
      /// Locales: en
      static let emptyEmailOrPassError = StringResource(key: "EmptyEmailOrPassError", tableName: "Localizable", locales: ["en"])
      /// en translation: Want more match options for your singles? Invite more matchmakers!
      /// 
      /// Locales: en
      static let emptyPairUpScreenMessage = StringResource(key: "EmptyPairUpScreenMessage", tableName: "Localizable", locales: ["en"])
      /// en translation: There aren't any matches for your selected single! Please try again later!
      /// 
      /// Locales: en
      static let emptyProposedSinglesMessage = StringResource(key: "EmptyProposedSinglesMessage", tableName: "Localizable", locales: ["en"])
      /// en translation: Error
      /// 
      /// Locales: en
      static let error = StringResource(key: "Error", tableName: "Localizable", locales: ["en"])
      /// en translation: Current session is expired, please try to login again.
      /// 
      /// Locales: en
      static let expiredSessionUpdatingError = StringResource(key: "ExpiredSessionUpdatingError", tableName: "Localizable", locales: ["en"])
      /// en translation: First Name
      /// 
      /// Locales: en
      static let firstNamePlaceholder = StringResource(key: "FirstNamePlaceholder", tableName: "Localizable", locales: ["en"])
      /// en translation: Type in your email
      /// 
      /// Locales: en
      static let forgotPassMessage = StringResource(key: "ForgotPassMessage", tableName: "Localizable", locales: ["en"])
      /// en translation: Email
      /// 
      /// Locales: en
      static let forgotPassTextFieldPlaceholder = StringResource(key: "ForgotPassTextFieldPlaceholder", tableName: "Localizable", locales: ["en"])
      /// en translation: Forgot Password
      /// 
      /// Locales: en
      static let forgotPassTitle = StringResource(key: "ForgotPassTitle", tableName: "Localizable", locales: ["en"])
      /// en translation: We've sent you an email. Click the link in the email to reset your password.
      /// 
      /// Locales: en
      static let forgotPasswordConfirmation = StringResource(key: "ForgotPasswordConfirmation", tableName: "Localizable", locales: ["en"])
      /// en translation: Gender
      /// 
      /// Locales: en
      static let genderPlaceholder = StringResource(key: "GenderPlaceholder", tableName: "Localizable", locales: ["en"])
      /// en translation: General
      /// 
      /// Locales: en
      static let generalButton = StringResource(key: "GeneralButton", tableName: "Localizable", locales: ["en"])
      /// en translation: Error occured while getting current user.
      /// 
      /// Locales: en
      static let getCurrentUserError = StringResource(key: "GetCurrentUserError", tableName: "Localizable", locales: ["en"])
      /// en translation: Please, check the info you entered.
      /// 
      /// Locales: en
      static let incorrectSignUpDataError = StringResource(key: "IncorrectSignUpDataError", tableName: "Localizable", locales: ["en"])
      /// en translation: Invite New
      /// 
      /// Locales: en
      static let inviteNewButton = StringResource(key: "InviteNewButton", tableName: "Localizable", locales: ["en"])
      /// en translation: Can't find your friend?
      /// 
      /// Locales: en
      static let invitePrompt = StringResource(key: "InvitePrompt", tableName: "Localizable", locales: ["en"])
      /// en translation: Invite Sent
      /// 
      /// Locales: en
      static let inviteSentTitle = StringResource(key: "InviteSentTitle", tableName: "Localizable", locales: ["en"])
      /// en translation: Invite
      /// 
      /// Locales: en
      static let inviteTitle = StringResource(key: "InviteTitle", tableName: "Localizable", locales: ["en"])
      /// en translation: Last Name
      /// 
      /// Locales: en
      static let lastNamePlaceholder = StringResource(key: "LastNamePlaceholder", tableName: "Localizable", locales: ["en"])
      /// en translation: City, State, Country
      /// 
      /// Locales: en
      static let locationPlaceholder = StringResource(key: "LocationPlaceholder", tableName: "Localizable", locales: ["en"])
      /// en translation: Log in
      /// 
      /// Locales: en
      static let loginButtonTitle = StringResource(key: "LoginButtonTitle", tableName: "Localizable", locales: ["en"])
      /// en translation: Matchmakers
      /// 
      /// Locales: en
      static let matchmakerTabName = StringResource(key: "MatchmakerTabName", tableName: "Localizable", locales: ["en"])
      /// en translation: Matchmakers
      /// 
      /// Locales: en
      static let matchmakersInfoPostfix = StringResource(key: "MatchmakersInfoPostfix", tableName: "Localizable", locales: ["en"])
      /// en translation: Name
      /// 
      /// Locales: en
      static let namePlaceholder = StringResource(key: "NamePlaceholder", tableName: "Localizable", locales: ["en"])
      /// en translation:  of 5 Selected
      /// 
      /// Locales: en
      static let numberOfSelectedDates = StringResource(key: "NumberOfSelectedDates", tableName: "Localizable", locales: ["en"])
      /// en translation: OK
      /// 
      /// Locales: en
      static let oK = StringResource(key: "OK", tableName: "Localizable", locales: ["en"])
      /// en translation: Password
      /// 
      /// Locales: en
      static let passwordPlaceholder = StringResource(key: "PasswordPlaceholder", tableName: "Localizable", locales: ["en"])
      /// en translation: 3Degrees needs permission to send push notification to keep your up to date about all kind of activities happening in your network!
      /// 
      /// Locales: en
      static let pushNotificationsFailedRegistration = StringResource(key: "PushNotificationsFailedRegistration", tableName: "Localizable", locales: ["en"])
      /// en translation: Reset Password
      /// 
      /// Locales: en
      static let resetPassActionName = StringResource(key: "ResetPassActionName", tableName: "Localizable", locales: ["en"])
      /// en translation: Reset
      /// 
      /// Locales: en
      static let resetPassActionTitle = StringResource(key: "ResetPassActionTitle", tableName: "Localizable", locales: ["en"])
      /// en translation: Type in your new password
      /// 
      /// Locales: en
      static let resetPassMessage = StringResource(key: "ResetPassMessage", tableName: "Localizable", locales: ["en"])
      /// en translation: Password
      /// 
      /// Locales: en
      static let resetPassTextPlaceholder = StringResource(key: "ResetPassTextPlaceholder", tableName: "Localizable", locales: ["en"])
      /// en translation: Reset Password
      /// 
      /// Locales: en
      static let resetPassTitle = StringResource(key: "ResetPassTitle", tableName: "Localizable", locales: ["en"])
      /// en translation: Scheduling a Date
      /// 
      /// Locales: en
      static let schedulingDateTimesScreenTitle = StringResource(key: "SchedulingDateTimesScreenTitle", tableName: "Localizable", locales: ["en"])
      /// en translation: School
      /// 
      /// Locales: en
      static let schoolPlaceholder = StringResource(key: "SchoolPlaceholder", tableName: "Localizable", locales: ["en"])
      /// en translation: Sign in with Facebook
      /// 
      /// Locales: en
      static let signInWithFacebookButtonTitle = StringResource(key: "SignInWithFacebookButtonTitle", tableName: "Localizable", locales: ["en"])
      /// en translation: Sign up
      /// 
      /// Locales: en
      static let signUpButtonTitle = StringResource(key: "SignUpButtonTitle", tableName: "Localizable", locales: ["en"])
      /// en translation: Sign up with email
      /// 
      /// Locales: en
      static let signUpWithEmailButtonTitle = StringResource(key: "SignUpWithEmailButtonTitle", tableName: "Localizable", locales: ["en"])
      /// en translation: Sign up with Facebook
      /// 
      /// Locales: en
      static let signUpWithFacebookButtonTitle = StringResource(key: "SignUpWithFacebookButtonTitle", tableName: "Localizable", locales: ["en"])
      /// en translation: Singles
      /// 
      /// Locales: en
      static let singlesInfoPostfix = StringResource(key: "SinglesInfoPostfix", tableName: "Localizable", locales: ["en"])
      /// en translation: Singles
      /// 
      /// Locales: en
      static let singlesTabName = StringResource(key: "SinglesTabName", tableName: "Localizable", locales: ["en"])
      /// en translation: Unsupported type of content.
      /// 
      /// Locales: en
      static let staticPagesLoadingError = StringResource(key: "StaticPagesLoadingError", tableName: "Localizable", locales: ["en"])
      /// en translation: Support
      /// 
      /// Locales: en
      static let supportButton = StringResource(key: "SupportButton", tableName: "Localizable", locales: ["en"])
      /// en translation: Title
      /// 
      /// Locales: en
      static let titlePlaceholder = StringResource(key: "TitlePlaceholder", tableName: "Localizable", locales: ["en"])
      /// en translation: Sorry, something goes wrong, please try again later
      /// 
      /// Locales: en
      static let undefinedNetworkError = StringResource(key: "UndefinedNetworkError", tableName: "Localizable", locales: ["en"])
      /// en translation: User with the same email is already exists, please choose another one and try again.
      /// 
      /// Locales: en
      static let userAlreadyExistsError = StringResource(key: "UserAlreadyExistsError", tableName: "Localizable", locales: ["en"])
      /// en translation: User doesn't exist!
      /// 
      /// Locales: en
      static let userDoesntExistsError = StringResource(key: "UserDoesntExistsError", tableName: "Localizable", locales: ["en"])
      /// en translation: User with the given email address doesn't exist.
      /// 
      /// Locales: en
      static let userNotExistError = StringResource(key: "UserNotExistError", tableName: "Localizable", locales: ["en"])
      /// en translation: Warning
      /// 
      /// Locales: en
      static let warning = StringResource(key: "Warning", tableName: "Localizable", locales: ["en"])
      /// en translation: Sorry, email or password is not correct.
      /// 
      /// Locales: en
      static let wrongLoginPassError = StringResource(key: "WrongLoginPassError", tableName: "Localizable", locales: ["en"])
      
      /// en translation: About
      /// 
      /// Locales: en
      static func aboutButton(_: Void) -> String {
        return NSLocalizedString("AboutButton", comment: "")
      }
      
      /// en translation: If the proposed times don't work, you can chat with your date immediately below to reschedule! Let's get you on a date!
      /// 
      /// Locales: en
      static func acceptDateTimeDescription(_: Void) -> String {
        return NSLocalizedString("AcceptDateTimeDescription", comment: "")
      }
      
      /// en translation: Chat
      /// 
      /// Locales: en
      static func acceptDateTimeDoneButton(_: Void) -> String {
        return NSLocalizedString("AcceptDateTimeDoneButton", comment: "")
      }
      
      /// en translation: Date Proposals
      /// 
      /// Locales: en
      static func acceptDateTimeScreenTitle(_: Void) -> String {
        return NSLocalizedString("AcceptDateTimeScreenTitle", comment: "")
      }
      
      /// en translation: 
      /// 
      /// Locales: en
      static func acceptDateTimeSubtitle(_: Void) -> String {
        return NSLocalizedString("AcceptDateTimeSubtitle", comment: "")
      }
      
      /// en translation: Suggested Dates
      /// 
      /// Locales: en
      static func acceptDateTimeTitle(_: Void) -> String {
        return NSLocalizedString("AcceptDateTimeTitle", comment: "")
      }
      
      /// en translation: You accepted the invitation.
      /// 
      /// Locales: en
      static func acceptedInviteConfirmation(_: Void) -> String {
        return NSLocalizedString("AcceptedInviteConfirmation", comment: "")
      }
      
      /// en translation: Friends say you are...
      /// 
      /// Locales: en
      static func bioPlaceholder(_: Void) -> String {
        return NSLocalizedString("BioPlaceholder", comment: "")
      }
      
      /// en translation: Birthday
      /// 
      /// Locales: en
      static func birthdayPlaceholder(_: Void) -> String {
        return NSLocalizedString("BirthdayPlaceholder", comment: "")
      }
      
      /// en translation: Cancel
      /// 
      /// Locales: en
      static func cancel(_: Void) -> String {
        return NSLocalizedString("Cancel", comment: "")
      }
      
      /// en translation: Please, make sure all fields in the form are filled and confirm password is equal to password
      /// 
      /// Locales: en
      static func checkInputDataAlertMessage(_: Void) -> String {
        return NSLocalizedString("CheckInputDataAlertMessage", comment: "")
      }
      
      /// en translation: Please suggest up to 5 availabilities to make sure the upcoming date is going to be convenient for both parties.
      /// 
      /// Locales: en
      static func chooseDateTimeDescription(_: Void) -> String {
        return NSLocalizedString("ChooseDateTimeDescription", comment: "")
      }
      
      /// en translation: Done
      /// 
      /// Locales: en
      static func chooseDateTimeDoneButton(_: Void) -> String {
        return NSLocalizedString("ChooseDateTimeDoneButton", comment: "")
      }
      
      /// en translation: Tap on selection to edit
      /// 
      /// Locales: en
      static func chooseDateTimeSubtitle(_: Void) -> String {
        return NSLocalizedString("ChooseDateTimeSubtitle", comment: "")
      }
      
      /// en translation: Date
      /// 
      /// Locales: en
      static func chooseDateTimeTitle(_: Void) -> String {
        return NSLocalizedString("ChooseDateTimeTitle", comment: "")
      }
      
      /// en translation: Choose Date
      /// 
      /// Locales: en
      static func chooseDateTimesScreenTitle(_: Void) -> String {
        return NSLocalizedString("ChooseDateTimesScreenTitle", comment: "")
      }
      
      /// en translation: Confirm Password
      /// 
      /// Locales: en
      static func confirmPassPlaceholder(_: Void) -> String {
        return NSLocalizedString("ConfirmPassPlaceholder", comment: "")
      }
      
      /// en translation: Date Proposal
      /// 
      /// Locales: en
      static func dateProposalTitle(_: Void) -> String {
        return NSLocalizedString("DateProposalTitle", comment: "")
      }
      
      /// en translation: Dates
      /// 
      /// Locales: en
      static func datesTabName(_: Void) -> String {
        return NSLocalizedString("DatesTabName", comment: "")
      }
      
      /// en translation: You declined the invitation.
      /// 
      /// Locales: en
      static func declinedInviteConfimation(_: Void) -> String {
        return NSLocalizedString("DeclinedInviteConfimation", comment: "")
      }
      
      /// en translation: Degree
      /// 
      /// Locales: en
      static func degreePlaceholder(_: Void) -> String {
        return NSLocalizedString("DegreePlaceholder", comment: "")
      }
      
      /// en translation: Birthday
      /// 
      /// Locales: en
      static func dobPlaceholder(_: Void) -> String {
        return NSLocalizedString("DobPlaceholder", comment: "")
      }
      
      /// en translation: Email
      /// 
      /// Locales: en
      static func emailPlaceholder(_: Void) -> String {
        return NSLocalizedString("EmailPlaceholder", comment: "")
      }
      
      /// en translation: Place of work
      /// 
      /// Locales: en
      static func employerPlaceholder(_: Void) -> String {
        return NSLocalizedString("EmployerPlaceholder", comment: "")
      }
      
      /// en translation: Want a date? Invite more matchmakers!
      /// 
      /// Locales: en
      static func emptyDateProposalsMessage(_: Void) -> String {
        return NSLocalizedString("EmptyDateProposalsMessage", comment: "")
      }
      
      /// en translation: Email and password can't be empty.
      /// 
      /// Locales: en
      static func emptyEmailOrPassError(_: Void) -> String {
        return NSLocalizedString("EmptyEmailOrPassError", comment: "")
      }
      
      /// en translation: Want more match options for your singles? Invite more matchmakers!
      /// 
      /// Locales: en
      static func emptyPairUpScreenMessage(_: Void) -> String {
        return NSLocalizedString("EmptyPairUpScreenMessage", comment: "")
      }
      
      /// en translation: There aren't any matches for your selected single! Please try again later!
      /// 
      /// Locales: en
      static func emptyProposedSinglesMessage(_: Void) -> String {
        return NSLocalizedString("EmptyProposedSinglesMessage", comment: "")
      }
      
      /// en translation: Error
      /// 
      /// Locales: en
      static func error(_: Void) -> String {
        return NSLocalizedString("Error", comment: "")
      }
      
      /// en translation: Current session is expired, please try to login again.
      /// 
      /// Locales: en
      static func expiredSessionUpdatingError(_: Void) -> String {
        return NSLocalizedString("ExpiredSessionUpdatingError", comment: "")
      }
      
      /// en translation: First Name
      /// 
      /// Locales: en
      static func firstNamePlaceholder(_: Void) -> String {
        return NSLocalizedString("FirstNamePlaceholder", comment: "")
      }
      
      /// en translation: Type in your email
      /// 
      /// Locales: en
      static func forgotPassMessage(_: Void) -> String {
        return NSLocalizedString("ForgotPassMessage", comment: "")
      }
      
      /// en translation: Email
      /// 
      /// Locales: en
      static func forgotPassTextFieldPlaceholder(_: Void) -> String {
        return NSLocalizedString("ForgotPassTextFieldPlaceholder", comment: "")
      }
      
      /// en translation: Forgot Password
      /// 
      /// Locales: en
      static func forgotPassTitle(_: Void) -> String {
        return NSLocalizedString("ForgotPassTitle", comment: "")
      }
      
      /// en translation: We've sent you an email. Click the link in the email to reset your password.
      /// 
      /// Locales: en
      static func forgotPasswordConfirmation(_: Void) -> String {
        return NSLocalizedString("ForgotPasswordConfirmation", comment: "")
      }
      
      /// en translation: Gender
      /// 
      /// Locales: en
      static func genderPlaceholder(_: Void) -> String {
        return NSLocalizedString("GenderPlaceholder", comment: "")
      }
      
      /// en translation: General
      /// 
      /// Locales: en
      static func generalButton(_: Void) -> String {
        return NSLocalizedString("GeneralButton", comment: "")
      }
      
      /// en translation: Error occured while getting current user.
      /// 
      /// Locales: en
      static func getCurrentUserError(_: Void) -> String {
        return NSLocalizedString("GetCurrentUserError", comment: "")
      }
      
      /// en translation: Please, check the info you entered.
      /// 
      /// Locales: en
      static func incorrectSignUpDataError(_: Void) -> String {
        return NSLocalizedString("IncorrectSignUpDataError", comment: "")
      }
      
      /// en translation: Invite New
      /// 
      /// Locales: en
      static func inviteNewButton(_: Void) -> String {
        return NSLocalizedString("InviteNewButton", comment: "")
      }
      
      /// en translation: Can't find your friend?
      /// 
      /// Locales: en
      static func invitePrompt(_: Void) -> String {
        return NSLocalizedString("InvitePrompt", comment: "")
      }
      
      /// en translation: Invite Sent
      /// 
      /// Locales: en
      static func inviteSentTitle(_: Void) -> String {
        return NSLocalizedString("InviteSentTitle", comment: "")
      }
      
      /// en translation: Invite
      /// 
      /// Locales: en
      static func inviteTitle(_: Void) -> String {
        return NSLocalizedString("InviteTitle", comment: "")
      }
      
      /// en translation: Last Name
      /// 
      /// Locales: en
      static func lastNamePlaceholder(_: Void) -> String {
        return NSLocalizedString("LastNamePlaceholder", comment: "")
      }
      
      /// en translation: City, State, Country
      /// 
      /// Locales: en
      static func locationPlaceholder(_: Void) -> String {
        return NSLocalizedString("LocationPlaceholder", comment: "")
      }
      
      /// en translation: Log in
      /// 
      /// Locales: en
      static func loginButtonTitle(_: Void) -> String {
        return NSLocalizedString("LoginButtonTitle", comment: "")
      }
      
      /// en translation: Matchmakers
      /// 
      /// Locales: en
      static func matchmakerTabName(_: Void) -> String {
        return NSLocalizedString("MatchmakerTabName", comment: "")
      }
      
      /// en translation: Matchmakers
      /// 
      /// Locales: en
      static func matchmakersInfoPostfix(_: Void) -> String {
        return NSLocalizedString("MatchmakersInfoPostfix", comment: "")
      }
      
      /// en translation: Name
      /// 
      /// Locales: en
      static func namePlaceholder(_: Void) -> String {
        return NSLocalizedString("NamePlaceholder", comment: "")
      }
      
      /// en translation:  of 5 Selected
      /// 
      /// Locales: en
      static func numberOfSelectedDates(_: Void) -> String {
        return NSLocalizedString("NumberOfSelectedDates", comment: "")
      }
      
      /// en translation: OK
      /// 
      /// Locales: en
      static func oK(_: Void) -> String {
        return NSLocalizedString("OK", comment: "")
      }
      
      /// en translation: Password
      /// 
      /// Locales: en
      static func passwordPlaceholder(_: Void) -> String {
        return NSLocalizedString("PasswordPlaceholder", comment: "")
      }
      
      /// en translation: 3Degrees needs permission to send push notification to keep your up to date about all kind of activities happening in your network!
      /// 
      /// Locales: en
      static func pushNotificationsFailedRegistration(_: Void) -> String {
        return NSLocalizedString("PushNotificationsFailedRegistration", comment: "")
      }
      
      /// en translation: Reset Password
      /// 
      /// Locales: en
      static func resetPassActionName(_: Void) -> String {
        return NSLocalizedString("ResetPassActionName", comment: "")
      }
      
      /// en translation: Reset
      /// 
      /// Locales: en
      static func resetPassActionTitle(_: Void) -> String {
        return NSLocalizedString("ResetPassActionTitle", comment: "")
      }
      
      /// en translation: Type in your new password
      /// 
      /// Locales: en
      static func resetPassMessage(_: Void) -> String {
        return NSLocalizedString("ResetPassMessage", comment: "")
      }
      
      /// en translation: Password
      /// 
      /// Locales: en
      static func resetPassTextPlaceholder(_: Void) -> String {
        return NSLocalizedString("ResetPassTextPlaceholder", comment: "")
      }
      
      /// en translation: Reset Password
      /// 
      /// Locales: en
      static func resetPassTitle(_: Void) -> String {
        return NSLocalizedString("ResetPassTitle", comment: "")
      }
      
      /// en translation: Scheduling a Date
      /// 
      /// Locales: en
      static func schedulingDateTimesScreenTitle(_: Void) -> String {
        return NSLocalizedString("SchedulingDateTimesScreenTitle", comment: "")
      }
      
      /// en translation: School
      /// 
      /// Locales: en
      static func schoolPlaceholder(_: Void) -> String {
        return NSLocalizedString("SchoolPlaceholder", comment: "")
      }
      
      /// en translation: Sign in with Facebook
      /// 
      /// Locales: en
      static func signInWithFacebookButtonTitle(_: Void) -> String {
        return NSLocalizedString("SignInWithFacebookButtonTitle", comment: "")
      }
      
      /// en translation: Sign up
      /// 
      /// Locales: en
      static func signUpButtonTitle(_: Void) -> String {
        return NSLocalizedString("SignUpButtonTitle", comment: "")
      }
      
      /// en translation: Sign up with email
      /// 
      /// Locales: en
      static func signUpWithEmailButtonTitle(_: Void) -> String {
        return NSLocalizedString("SignUpWithEmailButtonTitle", comment: "")
      }
      
      /// en translation: Sign up with Facebook
      /// 
      /// Locales: en
      static func signUpWithFacebookButtonTitle(_: Void) -> String {
        return NSLocalizedString("SignUpWithFacebookButtonTitle", comment: "")
      }
      
      /// en translation: Singles
      /// 
      /// Locales: en
      static func singlesInfoPostfix(_: Void) -> String {
        return NSLocalizedString("SinglesInfoPostfix", comment: "")
      }
      
      /// en translation: Singles
      /// 
      /// Locales: en
      static func singlesTabName(_: Void) -> String {
        return NSLocalizedString("SinglesTabName", comment: "")
      }
      
      /// en translation: Unsupported type of content.
      /// 
      /// Locales: en
      static func staticPagesLoadingError(_: Void) -> String {
        return NSLocalizedString("StaticPagesLoadingError", comment: "")
      }
      
      /// en translation: Support
      /// 
      /// Locales: en
      static func supportButton(_: Void) -> String {
        return NSLocalizedString("SupportButton", comment: "")
      }
      
      /// en translation: Title
      /// 
      /// Locales: en
      static func titlePlaceholder(_: Void) -> String {
        return NSLocalizedString("TitlePlaceholder", comment: "")
      }
      
      /// en translation: Sorry, something goes wrong, please try again later
      /// 
      /// Locales: en
      static func undefinedNetworkError(_: Void) -> String {
        return NSLocalizedString("UndefinedNetworkError", comment: "")
      }
      
      /// en translation: User with the same email is already exists, please choose another one and try again.
      /// 
      /// Locales: en
      static func userAlreadyExistsError(_: Void) -> String {
        return NSLocalizedString("UserAlreadyExistsError", comment: "")
      }
      
      /// en translation: User doesn't exist!
      /// 
      /// Locales: en
      static func userDoesntExistsError(_: Void) -> String {
        return NSLocalizedString("UserDoesntExistsError", comment: "")
      }
      
      /// en translation: User with the given email address doesn't exist.
      /// 
      /// Locales: en
      static func userNotExistError(_: Void) -> String {
        return NSLocalizedString("UserNotExistError", comment: "")
      }
      
      /// en translation: Warning
      /// 
      /// Locales: en
      static func warning(_: Void) -> String {
        return NSLocalizedString("Warning", comment: "")
      }
      
      /// en translation: Sorry, email or password is not correct.
      /// 
      /// Locales: en
      static func wrongLoginPassError(_: Void) -> String {
        return NSLocalizedString("WrongLoginPassError", comment: "")
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  private init() {}
}

struct _R: Rswift.Validatable {
  static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(NSLocale.init) ?? NSLocale.currentLocale()
  static let hostingBundle = NSBundle(identifier: "com.threedegreesapp.3degrees") ?? NSBundle.mainBundle()
  
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _DayView: NibResourceType {
      let bundle = _R.hostingBundle
      let name = "DayView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> DayView? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? DayView
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try pairUpScene.validate()
      try authenticationScene.validate()
      try userProfileScene.validate()
      try commonScene.validate()
      try myNetworkScene.validate()
      try dateProposalScene.validate()
      try launchScreen.validate()
      try activityAndHistoryScene.validate()
    }
    
    struct activityAndHistoryScene: StoryboardResourceType, Rswift.Validatable {
      let bundle = _R.hostingBundle
      let initial = StoryboardViewControllerResource<ActivityTableViewController>(identifier: "Initial")
      let name = "ActivityAndHistoryScene"
      
      func initial(_: Void) -> ActivityTableViewController? {
        return UIStoryboard(resource: self).instantiateViewController(initial)
      }
      
      static func validate() throws {
        if UIImage(named: "defaultAvatarImage") == nil { throw ValidationError(description: "[R.swift] Image named 'defaultAvatarImage' is used in storyboard 'ActivityAndHistoryScene', but couldn't be loaded.") }
        if _R.storyboard.activityAndHistoryScene().initial() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'initial' could not be loaded from storyboard 'ActivityAndHistoryScene' as 'ActivityTableViewController'.") }
      }
      
      private init() {}
    }
    
    struct authenticationScene: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UINavigationController
      
      let bundle = _R.hostingBundle
      let name = "AuthenticationScene"
      let signInViewController = StoryboardViewControllerResource<SignInViewController>(identifier: "SignInViewController")
      let signUpModeViewController = StoryboardViewControllerResource<SignUpModeViewController>(identifier: "SignUpModeViewController")
      let signUpWithEmailViewController = StoryboardViewControllerResource<SignUpWithEmailViewController>(identifier: "SignUpWithEmailViewController")
      
      func signInViewController(_: Void) -> SignInViewController? {
        return UIStoryboard(resource: self).instantiateViewController(signInViewController)
      }
      
      func signUpModeViewController(_: Void) -> SignUpModeViewController? {
        return UIStoryboard(resource: self).instantiateViewController(signUpModeViewController)
      }
      
      func signUpWithEmailViewController(_: Void) -> SignUpWithEmailViewController? {
        return UIStoryboard(resource: self).instantiateViewController(signUpWithEmailViewController)
      }
      
      static func validate() throws {
        if UIImage(named: "backButton") == nil { throw ValidationError(description: "[R.swift] Image named 'backButton' is used in storyboard 'AuthenticationScene', but couldn't be loaded.") }
        if UIImage(named: "fbIcon") == nil { throw ValidationError(description: "[R.swift] Image named 'fbIcon' is used in storyboard 'AuthenticationScene', but couldn't be loaded.") }
        if _R.storyboard.authenticationScene().signUpModeViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'signUpModeViewController' could not be loaded from storyboard 'AuthenticationScene' as 'SignUpModeViewController'.") }
        if _R.storyboard.authenticationScene().signInViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'signInViewController' could not be loaded from storyboard 'AuthenticationScene' as 'SignInViewController'.") }
        if _R.storyboard.authenticationScene().signUpWithEmailViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'signUpWithEmailViewController' could not be loaded from storyboard 'AuthenticationScene' as 'SignUpWithEmailViewController'.") }
      }
      
      private init() {}
    }
    
    struct commonScene: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ModeViewController
      
      let bundle = _R.hostingBundle
      let modeViewController = StoryboardViewControllerResource<ModeViewController>(identifier: "ModeViewController")
      let name = "CommonScene"
      let pairUpNavViewController = StoryboardViewControllerResource<UINavigationController>(identifier: "PairUpNavViewController")
      let tabBarViewController = StoryboardViewControllerResource<TabBarViewController>(identifier: "TabBarViewController")
      
      func modeViewController(_: Void) -> ModeViewController? {
        return UIStoryboard(resource: self).instantiateViewController(modeViewController)
      }
      
      func pairUpNavViewController(_: Void) -> UINavigationController? {
        return UIStoryboard(resource: self).instantiateViewController(pairUpNavViewController)
      }
      
      func tabBarViewController(_: Void) -> TabBarViewController? {
        return UIStoryboard(resource: self).instantiateViewController(tabBarViewController)
      }
      
      static func validate() throws {
        if UIImage(named: "tabBarBack") == nil { throw ValidationError(description: "[R.swift] Image named 'tabBarBack' is used in storyboard 'CommonScene', but couldn't be loaded.") }
        if UIImage(named: "dateProposal") == nil { throw ValidationError(description: "[R.swift] Image named 'dateProposal' is used in storyboard 'CommonScene', but couldn't be loaded.") }
        if UIImage(named: "activityAndHistory") == nil { throw ValidationError(description: "[R.swift] Image named 'activityAndHistory' is used in storyboard 'CommonScene', but couldn't be loaded.") }
        if UIImage(named: "myNetwork") == nil { throw ValidationError(description: "[R.swift] Image named 'myNetwork' is used in storyboard 'CommonScene', but couldn't be loaded.") }
        if UIImage(named: "myNetworkSelected") == nil { throw ValidationError(description: "[R.swift] Image named 'myNetworkSelected' is used in storyboard 'CommonScene', but couldn't be loaded.") }
        if UIImage(named: "dateProposalSelected") == nil { throw ValidationError(description: "[R.swift] Image named 'dateProposalSelected' is used in storyboard 'CommonScene', but couldn't be loaded.") }
        if UIImage(named: "activityAndHistorySelected") == nil { throw ValidationError(description: "[R.swift] Image named 'activityAndHistorySelected' is used in storyboard 'CommonScene', but couldn't be loaded.") }
        if _R.storyboard.commonScene().modeViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'modeViewController' could not be loaded from storyboard 'CommonScene' as 'ModeViewController'.") }
        if _R.storyboard.commonScene().tabBarViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'tabBarViewController' could not be loaded from storyboard 'CommonScene' as 'TabBarViewController'.") }
        if _R.storyboard.commonScene().pairUpNavViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'pairUpNavViewController' could not be loaded from storyboard 'CommonScene' as 'UINavigationController'.") }
      }
      
      private init() {}
    }
    
    struct dateProposalScene: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UINavigationController
      
      let bundle = _R.hostingBundle
      let dateProposalSceneNavController = StoryboardViewControllerResource<UINavigationController>(identifier: "DateProposalSceneNavController")
      let dateProposalViewController = StoryboardViewControllerResource<DateProposalViewController>(identifier: "DateProposalViewController")
      let dateProposalsCollectionViewController = StoryboardViewControllerResource<DateProposalsCollectionViewController>(identifier: "DateProposalsCollectionViewController")
      let name = "DateProposalScene"
      let scheduleDateTimeViewController = StoryboardViewControllerResource<ScheduleDateTimeViewController>(identifier: "ScheduleDateTimeViewController")
      let scheduleResultsViewController = StoryboardViewControllerResource<ScheduleResultsViewController>(identifier: "ScheduleResultsViewController")
      
      func dateProposalSceneNavController(_: Void) -> UINavigationController? {
        return UIStoryboard(resource: self).instantiateViewController(dateProposalSceneNavController)
      }
      
      func dateProposalViewController(_: Void) -> DateProposalViewController? {
        return UIStoryboard(resource: self).instantiateViewController(dateProposalViewController)
      }
      
      func dateProposalsCollectionViewController(_: Void) -> DateProposalsCollectionViewController? {
        return UIStoryboard(resource: self).instantiateViewController(dateProposalsCollectionViewController)
      }
      
      func scheduleDateTimeViewController(_: Void) -> ScheduleDateTimeViewController? {
        return UIStoryboard(resource: self).instantiateViewController(scheduleDateTimeViewController)
      }
      
      func scheduleResultsViewController(_: Void) -> ScheduleResultsViewController? {
        return UIStoryboard(resource: self).instantiateViewController(scheduleResultsViewController)
      }
      
      static func validate() throws {
        if UIImage(named: "occupationIcon") == nil { throw ValidationError(description: "[R.swift] Image named 'occupationIcon' is used in storyboard 'DateProposalScene', but couldn't be loaded.") }
        if UIImage(named: "defaultAvatarImage") == nil { throw ValidationError(description: "[R.swift] Image named 'defaultAvatarImage' is used in storyboard 'DateProposalScene', but couldn't be loaded.") }
        if UIImage(named: "educationIcon") == nil { throw ValidationError(description: "[R.swift] Image named 'educationIcon' is used in storyboard 'DateProposalScene', but couldn't be loaded.") }
        if UIImage(named: "bioIcon") == nil { throw ValidationError(description: "[R.swift] Image named 'bioIcon' is used in storyboard 'DateProposalScene', but couldn't be loaded.") }
        if UIImage(named: "forward-icon") == nil { throw ValidationError(description: "[R.swift] Image named 'forward-icon' is used in storyboard 'DateProposalScene', but couldn't be loaded.") }
        if UIImage(named: "back-icon") == nil { throw ValidationError(description: "[R.swift] Image named 'back-icon' is used in storyboard 'DateProposalScene', but couldn't be loaded.") }
        if UIImage(named: "dateIcon") == nil { throw ValidationError(description: "[R.swift] Image named 'dateIcon' is used in storyboard 'DateProposalScene', but couldn't be loaded.") }
        if _R.storyboard.dateProposalScene().dateProposalSceneNavController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'dateProposalSceneNavController' could not be loaded from storyboard 'DateProposalScene' as 'UINavigationController'.") }
        if _R.storyboard.dateProposalScene().dateProposalsCollectionViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'dateProposalsCollectionViewController' could not be loaded from storyboard 'DateProposalScene' as 'DateProposalsCollectionViewController'.") }
        if _R.storyboard.dateProposalScene().scheduleDateTimeViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'scheduleDateTimeViewController' could not be loaded from storyboard 'DateProposalScene' as 'ScheduleDateTimeViewController'.") }
        if _R.storyboard.dateProposalScene().scheduleResultsViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'scheduleResultsViewController' could not be loaded from storyboard 'DateProposalScene' as 'ScheduleResultsViewController'.") }
        if _R.storyboard.dateProposalScene().dateProposalViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'dateProposalViewController' could not be loaded from storyboard 'DateProposalScene' as 'DateProposalViewController'.") }
      }
      
      private init() {}
    }
    
    struct launchScreen: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIViewController
      
      let bundle = _R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIImage(named: "authBackground") == nil { throw ValidationError(description: "[R.swift] Image named 'authBackground' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      private init() {}
    }
    
    struct myNetworkScene: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MyNetworkViewController
      
      let bundle = _R.hostingBundle
      let chatViewController = StoryboardViewControllerResource<ChatViewController>(identifier: "ChatViewController")
      let contactSearchTableViewController = StoryboardViewControllerResource<ContactSearchTableViewController>(identifier: "ContactSearchTableViewController")
      let dateProfileViewController = StoryboardViewControllerResource<DateProfileViewController>(identifier: "DateProfileViewController")
      let myNetworkViewController = StoryboardViewControllerResource<MyNetworkViewController>(identifier: "MyNetworkViewController")
      let name = "MyNetworkScene"
      
      func chatViewController(_: Void) -> ChatViewController? {
        return UIStoryboard(resource: self).instantiateViewController(chatViewController)
      }
      
      func contactSearchTableViewController(_: Void) -> ContactSearchTableViewController? {
        return UIStoryboard(resource: self).instantiateViewController(contactSearchTableViewController)
      }
      
      func dateProfileViewController(_: Void) -> DateProfileViewController? {
        return UIStoryboard(resource: self).instantiateViewController(dateProfileViewController)
      }
      
      func myNetworkViewController(_: Void) -> MyNetworkViewController? {
        return UIStoryboard(resource: self).instantiateViewController(myNetworkViewController)
      }
      
      static func validate() throws {
        if UIImage(named: "occupationIcon") == nil { throw ValidationError(description: "[R.swift] Image named 'occupationIcon' is used in storyboard 'MyNetworkScene', but couldn't be loaded.") }
        if UIImage(named: "defaultAvatarImage") == nil { throw ValidationError(description: "[R.swift] Image named 'defaultAvatarImage' is used in storyboard 'MyNetworkScene', but couldn't be loaded.") }
        if UIImage(named: "mathProfileButton") == nil { throw ValidationError(description: "[R.swift] Image named 'mathProfileButton' is used in storyboard 'MyNetworkScene', but couldn't be loaded.") }
        if UIImage(named: "bioIcon") == nil { throw ValidationError(description: "[R.swift] Image named 'bioIcon' is used in storyboard 'MyNetworkScene', but couldn't be loaded.") }
        if UIImage(named: "addToNetwork") == nil { throw ValidationError(description: "[R.swift] Image named 'addToNetwork' is used in storyboard 'MyNetworkScene', but couldn't be loaded.") }
        if UIImage(named: "chatButtonShade") == nil { throw ValidationError(description: "[R.swift] Image named 'chatButtonShade' is used in storyboard 'MyNetworkScene', but couldn't be loaded.") }
        if UIImage(named: "chatButton") == nil { throw ValidationError(description: "[R.swift] Image named 'chatButton' is used in storyboard 'MyNetworkScene', but couldn't be loaded.") }
        if _R.storyboard.myNetworkScene().myNetworkViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'myNetworkViewController' could not be loaded from storyboard 'MyNetworkScene' as 'MyNetworkViewController'.") }
        if _R.storyboard.myNetworkScene().chatViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'chatViewController' could not be loaded from storyboard 'MyNetworkScene' as 'ChatViewController'.") }
        if _R.storyboard.myNetworkScene().contactSearchTableViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'contactSearchTableViewController' could not be loaded from storyboard 'MyNetworkScene' as 'ContactSearchTableViewController'.") }
        if _R.storyboard.myNetworkScene().dateProfileViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'dateProfileViewController' could not be loaded from storyboard 'MyNetworkScene' as 'DateProfileViewController'.") }
      }
      
      private init() {}
    }
    
    struct pairUpScene: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = PairUpViewController
      
      let bundle = _R.hostingBundle
      let filterViewController = StoryboardViewControllerResource<FilterViewController>(identifier: "FilterViewController")
      let name = "PairUpScene"
      let pairUpViewController = StoryboardViewControllerResource<PairUpViewController>(identifier: "PairUpViewController")
      
      func filterViewController(_: Void) -> FilterViewController? {
        return UIStoryboard(resource: self).instantiateViewController(filterViewController)
      }
      
      func pairUpViewController(_: Void) -> PairUpViewController? {
        return UIStoryboard(resource: self).instantiateViewController(pairUpViewController)
      }
      
      static func validate() throws {
        if UIImage(named: "occupationIcon") == nil { throw ValidationError(description: "[R.swift] Image named 'occupationIcon' is used in storyboard 'PairUpScene', but couldn't be loaded.") }
        if UIImage(named: "defaultAvatarImage") == nil { throw ValidationError(description: "[R.swift] Image named 'defaultAvatarImage' is used in storyboard 'PairUpScene', but couldn't be loaded.") }
        if UIImage(named: "educationIcon") == nil { throw ValidationError(description: "[R.swift] Image named 'educationIcon' is used in storyboard 'PairUpScene', but couldn't be loaded.") }
        if UIImage(named: "pairUpButtonBack") == nil { throw ValidationError(description: "[R.swift] Image named 'pairUpButtonBack' is used in storyboard 'PairUpScene', but couldn't be loaded.") }
        if UIImage(named: "bioIcon") == nil { throw ValidationError(description: "[R.swift] Image named 'bioIcon' is used in storyboard 'PairUpScene', but couldn't be loaded.") }
        if _R.storyboard.pairUpScene().pairUpViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'pairUpViewController' could not be loaded from storyboard 'PairUpScene' as 'PairUpViewController'.") }
        if _R.storyboard.pairUpScene().filterViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'filterViewController' could not be loaded from storyboard 'PairUpScene' as 'FilterViewController'.") }
      }
      
      private init() {}
    }
    
    struct userProfileScene: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UINavigationController
      
      let accountViewController = StoryboardViewControllerResource<AccountViewController>(identifier: "AccountViewController")
      let bundle = _R.hostingBundle
      let name = "UserProfileScene"
      let profileViewController = StoryboardViewControllerResource<ProfileViewController>(identifier: "ProfileViewController")
      let staticContentViewController = StoryboardViewControllerResource<StaticContentViewController>(identifier: "StaticContentViewController")
      let userProfileNavController = StoryboardViewControllerResource<UINavigationController>(identifier: "UserProfileNavController")
      
      func accountViewController(_: Void) -> AccountViewController? {
        return UIStoryboard(resource: self).instantiateViewController(accountViewController)
      }
      
      func profileViewController(_: Void) -> ProfileViewController? {
        return UIStoryboard(resource: self).instantiateViewController(profileViewController)
      }
      
      func staticContentViewController(_: Void) -> StaticContentViewController? {
        return UIStoryboard(resource: self).instantiateViewController(staticContentViewController)
      }
      
      func userProfileNavController(_: Void) -> UINavigationController? {
        return UIStoryboard(resource: self).instantiateViewController(userProfileNavController)
      }
      
      static func validate() throws {
        if UIImage(named: "occupationIcon") == nil { throw ValidationError(description: "[R.swift] Image named 'occupationIcon' is used in storyboard 'UserProfileScene', but couldn't be loaded.") }
        if UIImage(named: "defaultAvatarImage") == nil { throw ValidationError(description: "[R.swift] Image named 'defaultAvatarImage' is used in storyboard 'UserProfileScene', but couldn't be loaded.") }
        if UIImage(named: "editAvatarButton") == nil { throw ValidationError(description: "[R.swift] Image named 'editAvatarButton' is used in storyboard 'UserProfileScene', but couldn't be loaded.") }
        if UIImage(named: "educationIcon") == nil { throw ValidationError(description: "[R.swift] Image named 'educationIcon' is used in storyboard 'UserProfileScene', but couldn't be loaded.") }
        if UIImage(named: "bioIcon") == nil { throw ValidationError(description: "[R.swift] Image named 'bioIcon' is used in storyboard 'UserProfileScene', but couldn't be loaded.") }
        if UIImage(named: "returnButton") == nil { throw ValidationError(description: "[R.swift] Image named 'returnButton' is used in storyboard 'UserProfileScene', but couldn't be loaded.") }
        if UIImage(named: "importAvatarFromFb") == nil { throw ValidationError(description: "[R.swift] Image named 'importAvatarFromFb' is used in storyboard 'UserProfileScene', but couldn't be loaded.") }
        if _R.storyboard.userProfileScene().userProfileNavController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'userProfileNavController' could not be loaded from storyboard 'UserProfileScene' as 'UINavigationController'.") }
        if _R.storyboard.userProfileScene().accountViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'accountViewController' could not be loaded from storyboard 'UserProfileScene' as 'AccountViewController'.") }
        if _R.storyboard.userProfileScene().staticContentViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'staticContentViewController' could not be loaded from storyboard 'UserProfileScene' as 'StaticContentViewController'.") }
        if _R.storyboard.userProfileScene().profileViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'profileViewController' could not be loaded from storyboard 'UserProfileScene' as 'ProfileViewController'.") }
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  private init() {}
}